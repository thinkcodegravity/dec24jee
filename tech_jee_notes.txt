Development Environment
	- programming on your component/section of the website
		example - login page
	( Practice on your own )
Testing Environment
	- End to End functioning of the website
	( Net practice ) 
Staging Environment
	- mockup production, pre-production
	( Actual stadium of same size as world cup grounds )
Production Environment
	- website running live on the internet
	( World Cup cricket )
	
*************************

Jee - website
	Java installed (1.8)
	Spring tool suite - development
		pre-installed with all the softwares necessary for spring framework/webservice etc
	putty - remote control software ( login/control into remote unix m/c from windows laptop)
	winscp - file uploading software ( upload/copy files from windows to unix)
	maven - build software ( included in Spring tool suite)
		compile - source code (english language ) INTO binary code
		packaging - compress all website code files into SINGLE executable file
	Git - code repository
		versioning system
		
Network of computers
	Types of internet
		By Connection
			wireline : Home internet
			wireless : Phone
					Satellite and towers
		By Size
			Internet = global network of computers
			intranet = university , organization , company
			lan = home

Phone number TO cellphone
	(123)-(222)-12323
IPaddress To Computer

mac Address - H/w identifier, hard coded/fixed
IPAddress - S/w identifier , can change
	Internet protocol address
	4 numbers
	separeted by .
	0-255
	
	123 . 22 . 244 . 11
	123.22.x.x
	subnet - area code identifier
	
	0.0.0.0
	------
	255.255.255.255
	4 billion unique ip addresses
	
	8 billion
	3 billion using internet
		per person more than 1 device
		
	IPV6
	32 digit long - trillions 
	1AF2:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
	x - hexa decimal
		0-9 A-F
port
N/w components
	DHCP
	DNS
	Router
	Load balancer
	
Network debug commands
	ipconfig : ipaddress of your machine
		ifconfig for mac
	ping : remote machine is reachable, round trip time taken to remote machine
	telnet : 
	tracert :
		tracerouter for mac



http://localhost/welcome.html


XML





XML
Extensible Markup Language
HTML
Hyper Text Markup Language



asdsad qweqwe asda 1233asd asd 123

Meta data - Information about Data

Markup - tagging
<address>
	<Name>
		<firstName></firstName>
		<lastName></lastName>
	</Name>
	<street>
		<streetName>asdad</streetName>
		<streetNumber>12345</streetNumber>
	</street>
	<city>asda</city>
	<zip>1233asd</zip>
	<country>asd 123</country>
</address>

Tags : mark information, defines boundary of the info
< > anchor tag
	<name> <street>
	Opening tag <name>
	closing tag </name>
Element : <>
	Root Element : <address> (Can be only 1 root)
	Parent Element : <address> , <street>
	Child Element : <name> , <zip> , <streetName>
	sibling element : 
Attributes : Key-value pair, they are part of element
	single unit of information, that cannot be broken down
	
	<address>
	<Name  age="10"  >
		<firstName></firstName>
		<lastName></lastName>
	</Name>
	<street>
		<streetName>asdad</streetName>
		<streetNumber>12345</streetNumber>
	</street>
	<city>asda</city>
	<zip>1233asd</zip>
	<country>asd 123</country>
</address>

.common-button-graphics{
	color- green
	shape - sqaure
	height -10%
}
.sign-in{
	width - 20%
}
.sign-in-securely{
	width - 40%
}
.add2Cart{
	width - 30%
}
.payment{
	width - 30%
}
.checkout{
	width - 30%
}
.registration{
	width - 30%
}

Events : customer actions on a website (interact)
	mouse :
		move - navigation
		click - selection
	keyboard :
		key press
		key down
		key up
	Html :
		load - open the website
		unload - close the website
		scroll -
		resize -
Event listener :
	Web program (html/css/javascript) can detect these events and then take some action
	
	
	
	Variable : hold data
	int balance=100;
	String name="john";
	boolean active=true;
	float weight = 122.5;
	String[] names={"john","jane"};
	
	var balance=100;
	var name="john";
	var active=true;
	var weight=122.5;
	var names={"john","jane"};
	
methods : processes data
	deposit 10$ : add 10$ to your balanc = 110$
	
	int result=add(10,20);
	public int add(int a, int b){
		return a+b;
	}
	
	var result=add(10,20);
	function add( a, b ){
		var sum=a+b;
		return sum;
	}
	
operators : 
	arithmetic, relational, unary,equal, logical and,
	*+-/,   == != , && ||, <>, ++ --, + -
	var num1=10;
	var num2=20;
	var sum=num1+num2;
	
	
control flow :
	if-else, for, while, do while, switch
	var num1=10;
	var num2=20;
	if( num1 == num2 )
		console.log("they are same");
	else
		console.log("they are different");
	
	for(var i=0; i < 2 ; i++ ){
		console.log("hi");
	}
	I C E - i=0 , true, print hi
	M C E - i=1, true, print hi
	M C E - i=2, false
	
	
	
	Jquery - 
	simplifies Javascript coding
	More ways to access html code -
		id,class attributes and element name
	decouple html and javascript code	
	animation effects in-built

Design or architecutre
	loosely coupled
	tightlty coupled

Car
	loosely coupled system
	
	
$("#sectionSubB").parent()
	
<div id="sectionA">
	<div id="sectionSubA">
		<input id="user" type="text"></input>
	</div>
	<div id="sectionSubB"> hi hello </div>	
</div>

sectionA 
	sectionSubA
		text box user 
	sectionSubB 
			hi hello text mesage




$("#sectionSubB").text();
	// READ texxt : give "hi hello"
	
	
$("#sectionSubB").text("bye bye");

$("#sectionSubA").html();
	// READ html code inside sectionsubA : <input id="user" type="text"></input>
	
// READ/access to customer typed value in the user text box			
$("#user").val();
// WRITE in the user text box			
$("#user").val("this is mandatory");





Simple data transfer between client and server
	Key-value pair
	userid=john&password=john1!&email=j@g.com
	userid=john
	password=john1!
	email=j@g.com
	
Complex data tranfer
	address=123 asdsa qeqwe asdas 123 asd&email=g.com
	
Xml - bulk, complex = meta data = info about data
	<address>
		<streetnumber>123</streetnumber>
		<streetname>asdsa</streetname>
		<city>qeqwe</city>
		<state>asdas</state>
		<zip>123</zip>
		<country>asd</country>
	</address>	
Json - JavaScript Object notation... string version of javascript object
	
	json
	{
		"streetnumber":123,
		"streetname":"asdsa",
		"city":"qeqwe",
		"state":"asdas",
		"zip":123,
		"country":"asd"
	}
	
	javascript object
	{
		streetnumber:123,
		streetname:"asdsa",
		city:"qeqwe",
		state:"asdas",
		zip:123,
		country:"asd"
	}
	
	Java object
	{
		int streetnumber=123;
		String streetname="asdsa";
		String city="qeqwe";
		String state="asdas";
		int zip=123;
		String country="asd";
	}
	
	
	
{
	"name":"john",
	"age":21,
	"loginActive":true,
	"height":5.7,
	"hobbies":[ "playing","reading" ],
	"address":{
		"streetName":"asd",
		"city":"qwe",
		"zip":123
	}
}

traditional data type. numeric, boolean, fraction,alphaNumeric
Arrays
complex data

attribute name and value are separated by :
multiple attribute name and value are separated by ,

Microservice : 
	dev or implement - Rest webservice using JSON exchange


Spring boot project - website

annotation : configuration of the project

1) folder structure 
2) dependancy - libraries/software to support webite development
3) packaging your software - create single installer file - build process - maven
4) Run website - webserver software (tomcat)
5) test website - test script for tessting website




1) who created reference ?   Tomcat (Web server )
Create reference java program
LoginServlet ls=new LoginServlet();

2) who is calling method ? service
ls.doPost()????


webserver : enables your website.. launches program internet... 
	tomcat : free , opensource
	jboss
	glassfish
	weblogic
	websphere
	iis
	
	
Servlet
	init :  initial setup for the servlet program
	service : routes request to either doGet or doPost
	doget : logic / algorithm for the service
	dopost : logic / algorithm for the service
	destroy : cleanup during shutdown
	
	
	
Request
		uid=john&pwd=john123
		json
		imaes
		video
Response
	text		= login success
	binary	= images,video,audio,file
	webpage	= 
		redirect
		forward
	
	
	
	
	
http://www.google.com/login?uid=john&pwd=john1!

http://www.google.com - which machine
/login - which program on google machine
?uid=john&pwd=john1! - what info u want to share with java program 


queryString


Text
images
video
audio
file
xml
json


block Russian country from my website

123.11.45.11

123.11 = US
213.3= Canada
55.6= russia

if( req.getRemoteAddr().startsWith("55.") == true )
	return "Blocked website in your country"



MVC Architecture/framework : 
	proven solutions to a known problem
Decoupled architecture
loosely connected

Tightly coupled

M-Model		Business logic
V-View 		HTML/ASP/JSP/PHP
C-Controller 	Servlet

html,java

Monolithic Architecture - 
	Giant project has everything
Microservices Architecture

http://localhost/additionService/10/20
path input

http://localhost/areaOfRectangle?breadth=20&length=50
query param input

Webservice with Complex data exchange
	Rest using Json
	
Complex Input
	principal
	time
	rateOfInterest
	

{
	"principal":100000,
	"time":12,
	"rate":5
}

JSON Mapper java program
public class SimpleInteresetInput{
	int principal;
	int time;
	int rate;
	// get set methods1
}


Complex Output

PostMan

	
produce = output 
consume = input

Swagger :
	Documentation and Testing of Rest webservice
	
/12/124
?num1=12&num2=124
complex json input
complex json output

swagger

WSDL : Webservice Description Language
xml

Soap webservice implementation
	top-down approach
	1) create wsdl file manually
	2) generate java program from wsdl file
	3) write code in the java program
	
	bottom-up approach
	1) write java program with logic
	2) add annotation @webservice
	3) auto generate wsdl file

Document
	can be validated ( includes schema in wsdl file)
	slower
	complex data type
RPC
	cannot be validated
	faster (light weight)
	simple data type


WSDL : describe websrevice in platform neutral language
Soap implemented : bottom up approach using annotation
				Axis CXF framework


webservice location
	http://localhost/additionService
input
	Get : in the url
		http://localhost/login/john/john1!
	Post : in the body
		http://localhost/login
		/john/john1!
output
	boolean

Browser : Rest webservice Client software (GET) 
Postman : Rest webservice Client software (POST) 
Soap UI : Soap webservice Client software 
RestTemplate : Rest webservice Client java program

RestTemplate rt=new RestTemplate();
rt.getForObject(  "URL+INPUT" , OUTPUT.class ) ;
boolean result=rt.getForObject( "http://localhost/login/john/john1!" , Boolean.class);

RestTemplate rt=new RestTemplate();
rt.postForObject(  "URL", INPUT_Object , OUTPUT.class ) ;

Soap webservice client
edit POM.xml file with wsdl url : generate the stub program
use stub program to call webservice methods





development : program website
production support : support (customer issue) website

Customer care :
	name	john
	phone	123123
	account id	11111
	problem 	i cannot login
	time		9/18 , 9:30 am
	
	john : 9:30 am
	jane : 9:50 am
	
	contact Developer
		logs : messages printed on the server.
	
	print message/logs with sysout
		issue is in code : which program is printing the message ???
		what time issue happened : time stamp printed with message ???
		message are not permanent ????
		Cannot control when to print and when not to ???
		
		
		
	Apache log4j
		log4j.properties : configure where and how to print messages
		
	Debugging : detailed messages
production support : error messages

printing messages : performance issue
	lot of printing - cpu and memory
	
Environments : 
	Production : millions of users
		log4j - ERROR
	staging : test users for website 10 testers, client
		log4j - INFO
	testing : test users for website 3-4 testers
		log4j - INFO
	development : programming and you test website
		log4j - DEBUG
	
	debug : detailed message printing
	Info : 
	error : printed only when exception occurs in application
	
	Debug > Info > Warning > Error
	
		Oop : 2 relationship
			inheritance : IS-A relationship
			composition : HAS-A relationship
			
	Iphone > Iphone3 > IphoneX
	Car > Nissan > Nissanz60		
			Nissan IS-A Car
			IphoneX IS-A Iphone
Food
Car
Vehicle
Pizza
Veggie Pizza
Ferrrari
Rock
cheese

Food-Pizza
	Pizza IS-A Food
Car-Vehicle
	Car IS-A Vehicle
Cheese-Pizza
	Pizza HAS-A Cheese
***************************************
Spring framework
	Dependancy Injection / Inversion of Control (DI / IOC)

	Aspect Oriented Programming (AOP)


Dependancy Injection 
	Dependancy : 2 programs connected by HAS-A relationship
		Car : depended on Engine, Wheel, AC
			Car HAS-A Engine
			
	Apple iphone : outsource
		MicroChip : Intel / Nvidia / AMD
		camera : nikkon/sony/samsung
		wireless software : att
		Apple apps
		
	Iphone 
		Has-A Camera (DEPENDANCY)
		camera is create/manufactured/INJECTED by nikkon into iphone
		
	public class Iphone{
		Camera highDef=new Camera(ssadd,wqeqwe123,4534543 ); // DONT CREATE
		
		@Autowired
		Camera highDef; // DEPENDANCY INJECTION
		// Dependancy - Iphone is depended on camera
		// Injection - Spring framework will create/initialize/inject object
		// creating camera object is outsourced spring framework
	}
	
	
	interface ICar{
		public void drive();
	}
	// cannot create object of incomplete program
	ICar ic=new ICar();
	
	
public void add2Cart( int amount){
	// production support code
	log.info("customer trying to withdraw 100$");
	// security code
	if(userid!=john && userid==andy && userid==mike)
		return;
	
	// give reward points
	
	// performance code
	long startTime=System.currentTimeInMillisec()	//start timer - 9:28:15
	// exception handling code
	try{
		//add2cart
	}
	catch(Exception e){
		sysout("sorry, please try again later");
	}	
	long stopTime=System.currentTimeInMillisec()//stop timer - 9:28:15
}
public void checkout( int amount){
	// production support code
	log.info("customer trying to deposit 100$");
	// security code
	if(userid!=john && userid==andy && userid==mike)
		return;
	
	// give reward points
	
	// performance code
	long startTime=System.currentTimeInMillisec()	//start timer - 9:28:15
	// exception handling code
	try{
		// checkout code
		}
	catch(Exception e){
		sysout("sorry, please try again later");
	}	
	long stopTime=System.currentTimeInMillisec()//stop timer - 9:28:15
}

public void login( int amount){
	// production support code
	log.info("customer trying to withdraw 100$");
	// security code
	if(userid!=john && userid==andy  )
		return;
	 
	// performance code
	long startTime=System.currentTimeInMillisec()	//start timer - 9:28:15
	// exception handling code
	try{
		// check userid and password
	}
	catch(Exception e){
		sysout("sorry, please try again later");
	}	
	long stopTime=System.currentTimeInMillisec()//stop timer - 9:28:15
}


public void changepassowr( int amount){
	// production support code
	log.info("customer trying to withdraw 100$");
	// security code
	if(userid!=john && userid==andy)
		return;
	// give reward points
	// performance code
	long startTime=System.currentTimeInMillisec()	//start timer - 9:28:15
	// exception handling code
	try{
		// change password
	}
	catch(Exception e){
		sysout("sorry, please try again later");
	}	
	long stopTime=System.currentTimeInMillisec()//stop timer - 9:28:15
}


public void commonCode(){
	// production support code
	log.info("customer trying to withdraw 100$");
	// security code
	if(userid!=john && userid==andy && userid==mike)
		return;
	// give rewards point
	// performance code
	long startTime=System.currentTimeInMillisec()	//start timer - 9:28:15
	// exception handling code
	try{
	}
	}
	catch(Exception e){
		sysout("sorry, please try again later");
	}	
	long stopTime=System.currentTimeInMillisec()//stop timer - 9:28:15
}
public void add2Cart( int amount){
		//add2cart code
}
public void checkout( int amount){
		// checkout code
}
public void login( int amount){
		// check userid and password
}
public void changepassowr( int amount){
		// change password code
}	


public void withdraw( int amount){
	// production support code
	log.info("customer trying to withdraw 100$");
	// security code
	if(userid!=john)
		return;
	// performance code
	long startTime=System.currentTimeInMillisec()	//start timer - 9:28:15
	// exception handling code
	try{
		balance=balance-amount;
	}
	catch(Exception e){
		sysout("sorry, please try again later");
	}	
	long stopTime=System.currentTimeInMillisec()//stop timer - 9:28:15
}

every line except line#11 : Cross cutting concerns. NOT directly contibuting to core business logic/ purpose of this method

Aspect oriented programming :
	allows to separate Core business logic with cross cutting concern
	
	Benefits : flexibility
		modifying exisitng code
		adding new feature code
	
	Spring Model View Controller

1) pom.xml
	add spring dependancy
2) xxxxApplication.java
	configure path to spring program
	write package names of where spring model and controller program
	are stored
3) Application.properties
	Spring view : webpage loction and extension
		prefix : location of webpages under webapp folder
		suffix : extension of webpage programs
	Spring data : Datasource : database url and credentials
4) write program 


Spring boot 		: website project setup
Spring framework 	: website development (write  programs)

Nissan altima
Nissan Z60

Servlet 
	cut trees
	shape wood
	make holes
	buy nail and nuts
	put them together
	
Spring : Upgrade to servlet controller architecture
	Package : Readily available wood, holes, nail and nuts
	put them together
	
Spring beans : 
	Configuration
	Component
		Controller
			RestController
		Service
		Repository
		
	Dependancy Injection : DI can be done only if the program being injected has one of the above annotation	
	
	public class programA	
	{
		@Autowired
		programB pb; // CANNOT BE INJECTED, SINCE PROGRAMB IS NOT SPRING BEAN CLASS
		
		@Autowired
		programC pc;

	}	
	public class programB{
	
	}
	
	@Component
	public class programC{
	
	}
	
	
	Bean Scope : visibility and life time of the spring object 
		Prototype : new object created every time
		Singleton
		Request
		Session
		
		
		
	Aspect : separate non business logic code from business logic code
	
	
	public class calculator{
	
		public int add(int a, int b){
			sysout(welcome to our calculator);			// NON BUSINESS LOGIC CODE
			sysout(customer trying to add 10 and 5);		// NON BUSINESS LOGIC CODE
			int sum=a+b;							// BUSINESS LOGIC CODE
			sysout(result is 15);						// NON BUSINESS LOGIC CODE
			sysout(thank you for using our calculator);		// NON BUSINESS LOGIC CODE
		}
		
	}
	
	
	
	package com.amazon.shopping;
	public class Cart
		public void add2Cart
		public void removeFromCart
		public void deleteCart
		
package com.amazon.checkout;
	public class Order
		public void processOrder
		public void orderCancel
			
package com.amazon.checkout;	
	public class Payment
		public void transfer money
			
		
within(com.amazon.checkout.Order) =  processOrder, orderCancel
within(com.amazon.checkout.*) =  processOrder, orderCancel, transferMoney		
within(com.amazon.*) 	= processOrder, orderCancel, transferMoney,add2Cart,removecart,deletecart4
		
		
		LoginBusiness
			int login(String s)
			void register(int i)
		OrderService
			float placeOrder(int i)
			int cancelOrder(String s)
			int editOder(int i)
		PaymentService
			void pay(int i)
		
		
		execution( * com.amazon.LoginBusiness.*(int) ) 
			||
		bean( *Service) 
			||
		within( com.amazon.PaymentService ) 
		
		
		register, editOrder, placeOrder 
		execution = method level control including input and output specifics
		within = class level
		bean = name wise match for classes
		
		
	upper case
	lower case	
	camel case
	
	CreditCardPayment	
	findBy
	
	
@Query("SELECT count(*) from users where state=?1 and city=?2",nativequery=true)
public int countCustomers(String a, String b);

dynamic binding : 
countCustomer("CA","San Jose");
	SELECT count(*) from users where state=?1 and city=?2
	SELECT count(*) from users where state='CA' and city='San Jose'

static query
SELECT count(*) from users where state='NY' and city='NY'